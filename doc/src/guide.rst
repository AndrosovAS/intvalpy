Использование интервалов
===============

В данном разделе представлен обзор использования класса Interval.

.. Содержание::

Cоздание
------------

Пакет Interval может быть загружен в интерпретатор Python с указанием

    >>> from intvalpy import Interval

который импортирует в текущее пространство имён класс Interval.

Интервалы - это объекты, которые могут быть созданы путём указания их нижних (левых) и верхних (правых) концов. Например:

    >>> a = [2, 7, -3]
    >>> b = [4, 5, 1]
    >>> data = Interval(a, b)

создаёт объект, представляющий собой массив математических интервалов [2, 4], [5, 7] и [-3, 1].
В случае, если интервал неправильный, то концы автоматически меняются местами. Данную функцию можно отключить 

    >>> data = Interval(a, b, sortQ=False),
    
однако делать это необходимо с осторожностью.
    
    
    >>> Interval(1, 2)

представляет собой математический промежуток, который содержит все значения между 1 и 2. Для того, чтобы получить одноточечные интервалы необходимо сделать следующее: 

    >>> Interval([1, 2], [1, 2])
    interval(['[1.0, 1.0]', '[2.0, 2.0]'])
    

Для указания пустого интервала:

    >>> Interval(float('-inf'), float('-inf'))
    [-inf, -inf]
    


Арифметические операции
----------

Операции над интервалами определяются следующим образом

Сложение:

    >>> f = Interval([-8, -6, -4], [3, -2, -1])
    >>> s = Interval([-8, -8, 4], [-1, -3, 4])
    >>> f + s
    interval(['[-16.0, 2.0]', '[-14.0, -5.0]', '[0.0, 3.0]'])

    >>> s = [3, 5, -2]
    >>> s + f
    interval(['[-5.0, 6.0]', '[-1.0, 3.0]', '[-6.0, -3.0]'])
    
    >>> s = 2
    >>> s + f
    interval(['[-6.0, 5.0]', '[-4.0, 0.0]', '[-2.0, 1.0]'])

Вычитание:

    >>> f = Interval([-8, -6, -4], [3, -2, -1])
    >>> s = Interval([-8, -8, 4], [-1, -3, 4])
    >>> f - s
    interval(['[-7.0, 11.0]', '[-3.0, 6.0]', '[-8.0, -5.0]'])

Умножение:

    >>> f = Interval([-8, -6, -4], [3, -2, -1])
    >>> s = Interval([-8, -8, 4], [-1, -3, 4])
    >>> f * s
    interval(['[-24.0, 64.0]', '[6.0, 48.0]', '[-16.0, -4.0]'])
    
Деление:

    >>> f = Interval([-8, -6, -4], [3, -2, -1])
    >>> s = Interval([-8, -8, 4], [-1, -3, 4])
    >>> f / s
    interval(['[-3.0, 8.0]', '[0.25, 2.0]', '[-1.0, -0.25]'])

Возведение в степень:
Возможно возвести в степень только с натуральным показателем: 

    >>> Interval(-2, 3) ** 2
    [0.0, 9.0]

Вы также можете взять модуль интервала:

    >>> abs(Interval(-2, 3))
    [0.0, 3.0]

Матричное и скалярное умножение:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> s = Interval([-8., 0., -8.], [-5., 1., 6.])
    >>> f @ s
    [-28.000000, 88.000000]


    >>> inf = [[ 2.,  1.,  4.],
               [ 0.,  1., -2.],
               [-6., -1.,  1.]]
    >>> sup = [[3., 2., 6.],
               [4., 4., 0.],
               [0., 3., 7.]]
    >>> f = Interval(inf, sup)
    >>> s = Interval([-3., -5., -1.], [ 6., -2.,  5.])
    >>> f @ s
    interval(['[-25.0, 46.0]', '[-42.0, 24.0]', '[-58.0, 58.0]'])
    
    
    >>> inf1 = [[-1., -2.],
                [-7., -5.]]
    >>> sup1 = [[ 3.,  5.],
                [-4.,  7.]]
    >>> f = Interval(inf1, sup1)
    >>> inf2 = [[-3.,  4.],
                [-7., -8.]]
    >>> sup2 = [[-2.,  4.],
                [ 3.,  0.]]
    >>> s = Interval(inf2, sup2)
    >>> f @ s
    interval([['[-44.0, 18.0]', '[-44.0, 28.0]']
              ['[-41.0, 56.0]', '[-84.0, 24.0]']])
 
 
Методы класса Interval
----------

В данном классе предложены методы для получения некоторых атрибутов интервала или интервалов. 

Для того, чтобы отдельно вывести левый(е) или правый(е) конц(ы) интервала:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    interval(['[-8.0, -1.0]', '[-1.0, 0.0]', '[1.0, 4.0]'])
    >>> f.a
    array([-8., -1.,  1.])
    >>> f.b
    array([-1.,  0.,  4.])

Радиус интервала(ов):
  
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.rad
    array([3.5, 0.5, 1.5])
    
Ширина интервала(ов):
  
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.wid
    array([7., 1., 3.])
    
Середина интервала(ов):
  
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.mid
    array([-4.5, -0.5,  2.5])

Мигнитуда интервала(ов):
  
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.mig
    array([1., 0., 1.])
    
Для создания глубокого копирования, чтобы копия не разделяла с оригиналом ссылки на внутренние объекты, следует воспользоваться:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> s = f.copy
    interval(['[-8.0, -1.0]', '[-1.0, 0.0]', '[1.0, 4.0]'])
    >>> f == s
    array([ True,  True,  True])
    >>> s[1] = Interval(-100, 100)
    >>> f == s
    array([ True, False,  True])
    
Алгебраически обратный интервал(ы):

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.invbar
    interval(['[-1.0, -8.0]', '[0.0, -1.0]', '[4.0, 1.0]'])
    
Алгебраически противоположный интервал(ы):

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f.opp
    interval(['[8.0, 1.0]', '[1.0, 0.0]', '[-1.0, -4.0]'])


Эмуляция коллекций
----------

Чтобы узнать, какую длину имеет массив из интервалов, воспользуйтесь оператором ``len``:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> len(f)
    3
    
С помощью оператора ``in`` можно проверить, содержится ли скаляр в интервале:

    >>> f = Interval(-5, 8)
    >>> -4 in f
    True

или другой интервал:

    >>> f = Interval(-5, 8)
    >>> Interval(-2, 1) in f
    True
    >>> Interval(-5.2, 1) in f
    False

Как было показано в примере о глубоком копировании можно получать элемент в указанной позиции:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f[1]
    [-1.000000, 0.000000]
    
или несколько элементов:
    
    >>> f[1:]
    interval(['[-1.0, 0.0]', '[1.0, 4.0]'])
    
Также реализована возможность изменять элементы:

    >>> f[1:] = Interval([-5,-10], [5, 10])
    >>> f
    interval(['[-8.0, -1.0]', '[-5.0, 5.0]', '[-10.0, 10.0]'])
    
В случае, если элемент больше не нужен, то его можно удалить с выбранной позиции: 

    >>> del f[1]
    >>> f
    interval(['[-8.0, -1.0]', '[-10.0, 10.0]'])

Для изменения порядка элементов на противоположный:

    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> f[::-1]
    interval(['[1.0, 4.0]', '[-1.0, 0.0]', '[-8.0, -1.0]'])


Согласование с другими библиотеками на Python
----------

Для создания глубокого копирования объекта Вы можете воспользоваться функцией ``deepcopy``:

    >>> from copy import deepcopy
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> s = deepcopy(f)
    
Кроме этого возможно преобразование в массив типа ``ndarray``:

    >>> import numpy as np
    >>> f = Interval([-8., -1., 1.], [-1., 0., 4.])
    >>> s = np.array(f)
    >>> s
    array([[-8.0, -1.0], [-1.0, 0.0], [1.0, 4.0]], dtype=object)
    
Также с помощью библиотеки ``numpy`` возможно вычислить такие функции, как ``sin``, ``cos`` и ``exp``:

    >>> np.sin(f)
    interval(['[-1.0, 1.0]', '[-0.841471, 0.0]', '[-0.756802, 1.0]'])
    >>> np.cos(f)
    interval(['[-1.0, 1.0]', '[0.540302, 1.0]', '[-1.0, 0.540302]'])
    >>> np.exp(f)
    interval(['[0.000335, 0.367879]', '[0.367879, 1.0]', '[2.718282, 54.598150]'])

