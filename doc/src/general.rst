Общие функции
===============

В данном разделе представлен обзор наиболее часто применяемых операций.

.. Содержание::

Преобразование данных в интервальный тип
------------

Для того, чтобы преобразовать входные данные в интервальный тип следует воспользоваться функцией ``asinterval``:

Parameters:
            a: ``array_like``
                Входные данные, в любой форме, которые могут быть преобразованы в массив интервалов.
                Это относится к данным типов ``int``, ``float``, ``list`` и ``ndarrays``. 

Returns:
            out: ``Interval``
                Преобразование не выполняется, если входные данные уже имеют тип ``Interval``.
                Если входные данные имеют типы ``int``, ``float``, ``list`` или ``ndarrays``, то возвращается
                базовый класс ``Interval``.

Примеры:

>>> import intvalpy as ip
>>> data = 3
>>> ip.asinterval(data)
[3.000000, 3.000000]

>>> data = [1/3, ip.Interval(-2, 5), 2]
>>> ip.asinterval(data)
interval(['[0.333333, 0.333333]', '[-2.0, 5.0]', '[2.0, 2.0]'])
    
    
Пересечение интервалов 
------------   

Функция ``intersection`` осуществляет пересечение интервальных данных. В случае, если на вход поданы массивы, то осуществляется покомпонентное пересечение.

Parameters:
            A, B: ``Interval``
                В случае, если операнды не являются интервальным типом, то
                они преобразуются функцией ``asinterval``.

Returns:
            out: ``Interval``
                Возвращается массив пересечённых интервалов.
                Если некоторые интервалы не пересекаются, то на их месте
                выводится интервал ``Interval(float('-inf'), float('-inf'))``.
                
Примеры:

>>> import intvalpy as ip
>>> f = ip.Interval([-3., -6., -2.], [0., 5., 6.])
>>> s = ip.Interval(-1, 10)
>>> ip.intersection(f, s)
interval(['[-1.0, 0.0]', '[-1.0, 5.0]', '[-1.0, 6.0]'])

>>> f = ip.Interval([-3., -6., -2.], [0., 5., 6.])
>>> s = -2
>>> ip.intersection(f, s)
interval(['[-2.0, -2.0]', '[-2.0, -2.0]', '[-2.0, -2.0]'])

>>> f = ip.Interval([-3., -6., -2.], [0., 5., 6.])
>>> s = ip.Interval([ 2., -8., -6.], [6., 7., 0.])
>>> ip.intersection(f, s)
interval(['[-inf, -inf]', '[-6.0, 5.0]', '[-2.0, 0.0]'])


Метрика
------------   

Для вычисления метрики (расстояния) или мультиметрики (векторного расстояния) в интервальных пространствах предусмотрена функция ``dist``:


Parameters:
            a, b: ``Interval``
                Интервалы между которыми необходимо найти расстояние ``dist``.
                В случае многомерности операндов вычисляется мультиметрика (векторнозначное расстояние). 

            order: ``int``
                Задаются различные метрики. По умолчанию используется Чебышёвское расстояние.

Returns:
            out: ``float``
                Возвращается расстояние между входными операндами.

Пример:

>>> import intvalpy as ip
>>> f = ip.Interval([[0, 2], [4, 6]],
>>>                 [[1, 3], [5, 7]])
>>> s = ip.Interval([[1, 3], [5, 7]],
>>>                 [[2, 4], [6, 8]])
>>> ip.dist(f, s)
1.0

Более подробную информацию о различных метриках на множестве интервалов можно узнать, к примеру, из `книги <http://www.nsc.ru/interval/Library/InteBooks/SharyBook.pdf>`_.


Интервал из нулей
------------ 

Для создания интервального массива данных, где каждый интервал точечный и имеет значение нуль, предусмотрена функция ``zeros``:

>>> import intvalpy as ip
>>> ip.zeros((2, 3))
interval([['[0.0, 0.0]', '[0.0, 0.0]', '[0.0, 0.0]'],
          ['[0.0, 0.0]', '[0.0, 0.0]', '[0.0, 0.0]']])
          
